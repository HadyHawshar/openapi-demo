openapi: 3.0.3

info:
  version: "1.0"
  title: "Vbout API"
  description: |-
    # Introduction
    Vbout API provides programmatic access to read and write Vbout data. You can use it to synch user information between your own database and Vbout's marketing automation, get prospects information and more. The responses are available in JSON/XML.
    # Authentication
    Vbout offers authentication through:
      - API Key
      - An Application Key is generated from your Account Settings and activated through Vbout Connect. This key gives limited access to your account and can be deleted whenever you want to prevent access.
  x-logo:
    url: "https://i.im.ge/2022/09/15/1lJujf.vbout-logo.png"
    backgroundColor: "#FFFFFF"
    altText: "Vbout logo"

externalDocs:
  description: "Quickstart with Vbout API in PHP."
  url: https://developers.vbout.com/quickstart

servers:
- url: https://api.vbout.com/1
  description: Resource URL
  
#waiting until we finish all collections
# Collection grouping
#x-tagGroups:
  #- name: Application services
   # tags:
     # - Application
     


paths:
#Application
  "/App/Me":
    get:
      tags: ["Application"]
      summary: Application summary
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/app"
      description: 
       "**Authentication**: `required`
       \n\n**Format** : `XML | JSON`"                    

#including request responses samples
      x-codeSamples:
        - lang: 'CURL'
          source: |
            GET https://api.vbout.com/1/app/me.json?key={YOUR_API_ID}
        - lang: PHP
          source: |
            <?php
              require_once('../PATH/TO/services/ApplicationWS.php');
              $user_key = array('api_key' => '{YOUR_API_KEY}');
              $app = new ApplicationWS($user_key);
              $results = $app->getBusinessInfo();
              print_r($results);
            ?>

# Social Media endpoints

   #getpost
  "/SocialMedia/GetPost":
    get:
      tags: ["Social Media"]
      summary: get post summary
      responses:
         "200":
           description: successful operation
           content:
            application/json:
              schema:
                $ref: "#/components/schemas/getpost"  
      description: 
       "**Authentication**: `required`
       \n\n**Format** : `XML | JSON`"           
      parameters:
        - name: ID
          in: query
          description:
           "The ID of the post.\n\n
           **Possible Values:** (ID)"    
          required: true
          schema:
            type: integer
            default: None
        - name: Channel
          in: query
          description:
             "The channel where the post is created.\n\n**Possible Values:** facebook | twitter | linkedin"
          required: true
          schema:
            type: String
            default: None

      #sample requests-getpost
      x-codeSamples:
        - lang: 'CURL'
          source: |
            GET https://api.vbout.com/1/socialmedia/getpost.json?key={YOUR_API_ID}&id=682&channel=facebook
        - lang: PHP
          source: |
            <?php
               require_once('../PATH/TO/services/SocialMediaWS.php');
               $user_key = array('api_key' => '{YOUR_API_KEY}');
               $app = new SocialMediaWS($user_key);
               $params = array(
               'id' => '682',
               'channel' => 'facebook',
            );
              $results = $app->getMyPost( $params );
              print_r($results);
              ?>
    #addpost
  "/SocialMedia/AddPost":
    post:
      tags: ["Social Media"]
      summary: add post summary
      responses:
         "200":
           description: successful operation
        #   content:
        #    application/json:
        #     schema:
        #       $ref: "#/components/schemas/getpost"  
      description: 
       "**Authentication**: `required`
       \n\n**Format** : `XML | JSON`"
      parameters:
        - name: message
          in: query
          description: 
            "The post message to be scheduled/sent.\n\n**Possible values:**(text)"
          required: true
          schema:
            type: String
            default: None
        - name: Channel
          in: query
          description:
             "The channels which the post will be sent to.\n\n**Possible Values:** facebook | twitter | linkedin | pinterest | instagram"
          required: true
          schema:
            type: String
            default: None
        - name: Channelid
          in: query
          description:
             "The channels which the post will be sent to\n\n**Possible Values:** 1 | 2 | 3 | 4"
          required: true
          schema:
            type: integer
            default: None 
        - name: photo
          in: query
          description:
             "The photo which will be attached to the post.\n\n**Possible Values:** (Link) or (Uploaded Image)"
          schema:
            type: String     
            default: None     
        - name: isscheduled
          in: query
          description:
             "This flag will make the post to be scheduled for future.\n\n**Possible Values:** `true | false`"
          schema:
            type: boolean     
            default: false       
        - name: scheduleddate
          in: query
          description:
             "Date of the post to be scheduled.\n\n**Format Accepted:**(Date)"
          schema:
            type: date    
            pattern: ⠀⠀Format:⠀'/m/d/Y | Y-m-d'     
            default: None    
        - name: scheduledhours
          in: query
          description:
             "Time of the post to be scheduled.\n\n**Format Accepted:**(Time)"
          schema:
            type: time    
            pattern: ⠀⠀Format:⠀"HH:MM"     
            default: None         
        - name: scheduledampm
          in: query
          description:
             "AMPM of the post to be scheduled.\n\n**Possible values:**/AM | PM | am | pm"
          schema:
            type: String         
            default: None           
        - name: trackableLinks
          in: query
          description:
             "Convert all links inside message to short urls.\n\n**Possible values:**`true | false`"
          schema:
            type: boolean         
            default: false      
       
      #sample requests-addpost
      x-codeSamples:
        - lang: 'CURL'
          source: |
           POST https://api.vbout.com/1/socialmedia/addpost.json?key={YOUR_API_ID}
           message=Hello World
        - lang: PHP
          source: |
            <?php
             require_once('../PATH/TO/services/SocialMediaWS.php');
             $user_key = array('api_key' => '{YOUR_API_KEY}');
             $app = new SocialMediaWS($user_key);
             $params = array(
                 'message' => 'Hello World',
             );
             $results = $app->AddNewpost( $params );
             print_r($results);
             ?>          
      #security:
        #- api_key: []

    #editpost
  "/SocialMedia/EditPost":
    post:
      tags: ["Social Media"]
      summary: edit post summary
      responses:
         "200":
           description: successful operation
        #   content:
        #    application/json:
        #     schema:
        #       $ref: "#/components/schemas/getpost"  
      description: 
       "**Authentication**: `required`
       \n\n**Format** : `XML | JSON`" 
      parameters:
        - name: id
          in: query
          description:
            "ID of the post message to be edited/sent.\n\n**Possible Values:** (ID)"
          required: true
          schema:
            type: integer
            default: None 
        - name: channel
          in: query
          description: 
           "The channel where the post was scheduled/sent.\n\n**Possible Values:**  facebook | twitter | linkedin | pinterest | instagram"
          required: true
          schema:
            type: String
            default: None 
        - name: message
          in: query
          description: 
            "The post message to be scheduled/sent.\n\n**Possible Values:** (Text)"
          schema:
            type: String
            default: None
        - name: scheduleddatetime
          in: query
          description: 
            "Date/Time of the post to be scheduled.\n\n**Possible Values:**  (Datetime)"
          schema:
            type: datetime
            pattern: ⠀⠀Format:⠀"ISO-8601 (Y-m-d H:i:s)"
            default: None 
      #sample requests-addpost
      x-codeSamples:
        - lang: 'CURL'
          source: |
            POST https://api.vbout.com/1/socialmedia/editpost.json?key={YOUR_API_ID}
            id=1
            channel=facebook
            message=Hello World!
            scheduleddatetime=2020-10-20 15:30:00
      #  - lang: PHP
      #    source: |
      #      <?php
      #       require_once('../PATH/TO/services/SocialMediaWS.php');
  #Deletepost
  "/SocialMedia/DeletePost":
    delete:
      tags: ["Social Media"]
      summary: delete post summary
      responses:
        "200":
           description: Deleted successfully
        "404":
            description: Post not found
        #   content:
        #    application/json:
        #     schema:
        #       $ref: "#/components/schemas/getpost"
      description: 
       "**Authentication**: `required`
       \n\n**Format** : `XML | JSON`"
      parameters:
        - name: id
          in: query
          description:
            "ID of the post message to be deleted.\n\n**Possible Values:** (ID)"
          required: true
          schema:
            type: integer
            default: None  
        - name: channel
          in: query
          description: 
            "The channels which the post will be sent to.\n\n**Possible Values:**  facebook | twitter | linkedin"
          schema:
            type: String
            default: None
      #sample requests-addpost
      x-codeSamples:
        - lang: 'CURL'
          source: |
           POST https://api.vbout.com/1/socialmedia/deletepost.json?key={YOUR_API_ID}
           id=1
        - lang: PHP
          source: |
            <?php
             require_once('../PATH/TO/services/SocialMediaWS.php');	
             $user_key = array('api_key' => '{YOUR_API_KEY}');	
             $app = new SocialMediaWS($user_key);
             $id = '1';
             $results = $app->removePost($id);
             print_r($results);
            ?>                                                  

components:
  schemas:
    #Application-get /app/me'
    app:
      type: object
      properties:
        business:
          type: object
          properties:
            businessname:
              description: Business name
              type: String
              example: "Loft Hotels"
            contactname:
              description: Contact name
              type: String 
              example: "Paul Downy"
            phoneNumber:
              description: Contact phone number
              type: String
              example: "212-400-7133"
            vboutName:
              description: Contact's vbout name
              type: String
              example: "Loft-corporate"
            package:
              description: Package name
              type: String 
              example: "Franchise"      
# Social media /Getpost
    getpost:
      type: object
      properties:
        item:
          type: object
          properties:
            id:
             description: post id
             type: integer
             example: "682"
            title:
             description: post title
             type: string
             example: "OSV Treats & Chews provides a big nutritional boost of phytonutrients & antioxidants from fruits & vegetables; tomatoes, spinach & carrots! http://www.clearconsciencepet.com/osv-meaty-treats/"
        datetime:
          description: User first name
          type: string
          example: "05/16/2013 10:34 AM"
        Item:
          type: object
          properties:
            uid:
              description: user's platform ID
              type: integer
              example:  "0"
        type:
             description: Platform name
             type: string
             example:  "facebook"
        image:
             description: Image of the post
             type: string
             example:  ""
        profile:
             description: profile number
             type: integer
             example: "166346373390497"
    
  #securitySchemes:
    #api_key:
      #description: >
       # For this sample, you can use the api key `YOUR_API_ID` to test the
       # API.
      #type: apiKey
      #name: api_key 

 #Social-media addpost   
   